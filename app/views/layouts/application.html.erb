<!DOCTYPE html>
<html>
<head>
  <title>Math.B.B.S.</title>
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <%= csrf_meta_tags %>
  <link rel="icon" href="/favicon.ico" type="image/vnd.microsoft.icon">
  <meta name="keywords" content="数学,掲示板,数式,MathJax,javascript">
  <meta name="description" content="綺麗な数式を簡単に表示できる掲示板です。MathJaxやjavascriptを応用し、紙に書くのと変わらない書き心地を目指しています。">
  <script type="text/x-mathjax-config">MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ["\\(","\\)"]] } });</script>
  <script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"></script>
  <meta http-equiv="X-UA-Compatible" CONTENT="IE=EmulateIE7" />
  <script>
  document.addEventListener('DOMContentLoaded',function(){ document.getElementById('focusposition').focus();},false);


  function MathChange(output){
      output = output.replace(/\{/g,'\\left\\{\\right.');
      output = output.replace(/\}/g,'\\left.\\right\\}');
      output = output.replace(/\^\\left\\{\\right.(.*?)\\left.\\right\\}/g,'^{$1}');
      output = output.replace(/\_\\left\\{\\right.(.*?)\\left.\\right\\}/g,'_{$1}');
      output = output.replace(/\r\n/g,'\n');
      output = output.replace(/\r/g,'\n');
      output = output.replace(/\n/g,'\\\\ ');//改行
      output = output.replace(/\s /g,'\\ ');//スペース登録

     
    var fullWidth = 'ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ０１２３４５６７８９、。＾＋－（）｛｝'; 
    var halfWidth = 'abcdefghijklmnopqrstuvwxyz0123456789,.^+-(){}'; 
    for (var i=0,I=fullWidth.length; i<I; i++)
      output = output.replace(new RegExp(fullWidth.charAt(i),'g'),halfWidth.charAt(i));

    function divide(original){
      var slash = [], par = 0;
      for (var i=0,I=original.length; i<I; i++){
        var character = original.charAt(i);//i番目の配列を抜き出す
        switch (character){//以下でslash配列に/ごとの()の数を記憶させる
          case '(': par++; break;//character=='('ならpar=par+1
          case ')': par--; break;//character==')'ならpar=par+1
          case '/': slash.push([par,i]); break;//slash配列に[par,i]を記憶させてbreak
        }
      }
      var S = slash.length;//分数の分割の数
      if (S>0){//分数があれば
        for (var i=1,min=slash[0][0]; i<S; i++) min = Math.min(slash[i][0],min);//配列slashi番目のparの最小をminとする
        for (var i=0,minSlash=[-1]; i<S; i++) if (slash[i][0]==min) minSlash.push(slash[i][1]);//もしparが最小なら　その値をminSlashに入れる
        minSlash.push(I);//
        var parts = [];
        for (var i=0,M=minSlash.length; i<M-1; i++){
          parts[i] = original.slice(minSlash[i]+1,minSlash[i+1]);
          if (parts[i].indexOf('/')>=0) parts[i] = divide(parts[i]);
        }
        for (var i=0,I=parts.length-1; i<I; i++){
          for (var j=parts[i].length-1,par=0; j>=0; j--){
            var character = parts[i].charAt(j);
            if (character==')') par++;
            if (character=='(') par--;
            var flag = character.match(/[^A-Za-z0-9\*×\(\)]/);
            var flag2 = character.match(/[^A-Za-z0-9\*×]/);
            if ((par==0 && (flag || j==0)) || (par==-1 && flag2)){
              if (par==0 && !flag && j==0) j--;
              parts[i] = (parts[i].charAt(j+1)==('(') && parts[i].charAt(parts[i].length-1)==(')') && parts[i].slice(j+1).indexOf(')(')<0) ? parts[i].slice(0,j+1)+parts[i].slice(j+1).replace(/\((.*)\)/,'\\frac {$1}') : parts[i].slice(0,j+1)+'\\frac {'+parts[i].slice(j+1)+'}';
              break;
            }
          }
          for (var j=0,J=parts[i+1].length,par=0; j<J; j++){
            var character = parts[i+1].charAt(j);
            if (character=='(') par++;
            if (character==')') par--;
            var flag = character.match(/[^A-Za-z0-9\*×\(\)]/);
            if ((par==0 && (flag || j==J-1)) || (par==-1 && flag2)){
              if (par==0 && !flag && j==J-1) j++;
                parts[i+1] = (parts[i+1].charAt(0)==('(') && parts[i+1].charAt(j-1)==(')') && parts[i+1].slice(0,j).indexOf(')(')<0) ? parts[i+1].slice(0,j).replace(/\((.*)\)/,'{$1}')+parts[i+1].slice(j) : '{'+parts[i+1].slice(0,j)+'}'+parts[i+1].slice(j);
              break;
            }
          }
        }

        parts = parts.join('');

      }
      else var parts = original;
      return parts;
    }
    output = divide(output);//分数にする

   
    output = output.replace(/積分\(\)/g,'\\int\\ \\!\\ \\!\\ \\! ');
    output = output.replace(/積分\((.*?)(から|,)(.*?)\)/g,'\\int_{$1}^{$3}\ \\!\\ \\!\\ \\! ');

    output = output.replace(/\((.*?)\)乗根\((.*?)\)/g,'\\sqrt[$1]{$2} ');
    output = output.replace(/\((.*?)\)乗根\((.*?)\)/g,'\\sqrt[$1]{$2} ');
    output = output.replace(/\((.*?)\)乗根\((.*?)\)/g,'\\sqrt[$1]{$2} ');

    output = output.replace(/(.)乗根\((.*?)\)/g,'\\sqrt[$1]{$2} ');
    output = output.replace(/(.)乗根\((.*?)\)/g,'\\sqrt[$1]{$2} ');
    output = output.replace(/(.)乗根\((.*?)\)/g,'\\sqrt[$1]{$2} ');

    output = output.replace(/lim\((.*?)(が|,)(.*?)へ?\)/g,'\\lim_{$1 \\to $3} ');    
    output = output.replace(/(シグマ|しぐま|sum)\((.*?)(から|,)(.*?)\)/g,'\\sum_{$2}^{$4} ');

    output = output.replace(/(任意の?|すてべの?)\((.*?)\)/g,'{}^{\\forall}{$2} ');
    output = output.replace(/ある\((.*?)\)/g,'{}^{\\exists}{$1} ');
  
    output = output.replace(/<=>|&lt;=&gt;/g,'\\Longleftrightarrow ');
    output = output.replace(/<=|&lt;=/g,'\\Longleftarrow ');
    output = output.replace(/=>|=&gt;/g,'\\Longrightarrow ');
    output = output.replace(/=<|=&lt;/g,'\\le ');
    output = output.replace(/>=|&gt;=/g,'\\ge ');
    output = output.replace(/(ヘルプ|help)\(積分\)/g,'積分（１から４）\\Longrightarrow \\int_{1}^{4}, 積分（）\\Longrightarrow \\int ');
    output = output.replace(/(ヘルプ|help)\(順列\)/g,' \\_\\{n\\}P\\_\\{m\\}\\Longrightarrow \_\{n\}P\_\{m\}');
    output = output.replace(/(ヘルプ|help)\(組み合わせ\)/g,' \\_\\{n\\}C\\_\\{m\\}\\Longrightarrow \_\{n\}C\_\{m\}');
    

    var replacements = {  // 0:左側, 1:置換する語句, 2:右側, 3:行列ならtrue
      'ルート(': ['\\sqrt{\\mathstrut ',{},'} '],
      'オーバー(': ['\\overline{ ',{},'} '],
      'アンダー(': ['\\underline{ ',{},'} '],
      'ベクトル(': ['\\overrightarrow{ ',{},'} '],
      'in(': ['\\in{ ',{},'} '],      
      'ni(': ['\\ni{ ',{},'} '],      
      'sub(': ['\\subseteq{ ',{},'} '],
      'bus(': ['\\supseteq{ ',{},'} '],
      '行列(': ['\\left(\\begin{array}{c}',{'\\),\\(':'\\\\',',':' & '},'\\end{array}\\right) ',true],
      '連立(': ['\\left\\{\\begin{array}{l}',{',':'\\\\ '},'\\end{array}\\right. '],
    }
    for (var word in replacements){
      var temp = replacements[word];
      while(output.indexOf(word)>=0){
        var start = output.indexOf(word);
        var count = 0;
        var len = word.length
        for (var end=start+len,J=output.length; end<J; end++){
          var character = output.charAt(end);
          if (character=='(') count++;
          else if (character==')') count--;
          if (count<0) break;
        }
        var inside = output.slice(start+len,end);
        if (temp[3]) inside = inside.slice(1,inside.length-1);
        for (var before in temp[1]) inside = inside.replace(new RegExp(before,'g'),temp[1][before]);
        output = output.slice(0,start)+temp[0]+inside+temp[2]+output.slice(end+1);
      }
    }
    output = output.replace(/(ヘルプ|help)\(集合\)/g,'in(X)\\Longrightarrow \\in X,ni(x)\\Longrightarrow \\ni,sub(X)\\Longrightarrow \\subseteq X,bus(X)\\Longrightarrow \\supseteq X');
    output = output.replace(/(ヘルプ|help)\(ルート\)/g,'ルート (x) \\Longrightarrow \\sqrt{x}\\\\ \\ \\ \\ n 乗根 (x) \\Longrightarrow \\sqrt[n]{x}\\\\ \\ \\ \\ (n+m) 乗根 (x) \\Longrightarrow \\sqrt[n+m]{x} ');


//    output = output.replace(/\(/g,'\\left(\\right. ');
//    output = output.replace(/\)/g,'\\left.\\right) ');

    var jpnCommand = { 'アルファ':'\\alpha ','α':'\\alpha ','ベータ':'\\beta ','β':'\\beta ','ガンマ':'\\gamma ','γ':'\\gamma ','プラスマイナス':'\\pm ','パイ|ぱい':'\\pi ','無限大':'\\infty ','・・・':'\\cdots ','プラマイ':'\\pm ','マイプラ':'\\mp ','not':'\\not ','➗|÷':'\\div ','×':'\\times ','≡':'\\equiv '};
    for (var myJpn in jpnCommand)
      output = output.replace(new RegExp(myJpn,'g'),jpnCommand[myJpn]);

   
    return output;
  }

  function PreView1(){
    var exp = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
    input = document.getElementById('response_content').value;
    if((input).match(exp)){
      document.getElementById('realtime').innerHTML = input;
    }else{
      document.getElementById('realtime').innerHTML = '$\\displaystyle{'+MathChange(input)+'}$';
      MathJax.Hub.Typeset();
    }
  }
    function PreView2(){
    var exp = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
    input = document.getElementById('article_content').value;
    if((input).match(exp)){
      document.getElementById('realtime').innerHTML = input;
    }else{
      document.getElementById('realtime').innerHTML = '$\\displaystyle{'+MathChange(input)+'}$';
      MathJax.Hub.Typeset();
    }
  }


  $(document).ready(function() {
      var exp = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
      for(var n=0,N=document.getElementsByTagName('div1').length; n<N; n++) {
      var tagname =document.getElementsByTagName('div1')[n].innerHTML;

        if((tagname).match(exp)){
          $(document.getElementsByTagName('div1')[n]).html($(document.getElementsByTagName('div1')[n]).html().replace(exp,"<a href='$1' target='_blank'>$1</a>"));
        }else{
          document.getElementsByTagName('div1')[n].innerHTML = '$\\displaystyle{'+MathChange(tagname)+'}$';
          MathJax.Hub.Typeset();
        };
      };
  });
    
  </script>

</head>
<body>

<%= yield %>

</body>
</html>
